import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getBidsByProductId } from '../services/ProductBidApi';

export interface ProductBidState {
  dataList: [],
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ProductBidState = {
  dataList: [],
  status: 'idle',
};

export const productBidSlice = createSlice({
    name: 'productBid',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: { },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getBidsByProductId.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getBidsByProductId.fulfilled, (state, action) => {
          state.status = 'idle';
          state.dataList = action.payload
        })
        .addCase(getBidsByProductId.rejected, (state) => {
          state.status = 'failed';
        });
    },
  });
  
  const { reducer } = productBidSlice;
  export default reducer;
  

