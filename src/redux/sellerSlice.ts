import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getSellerDetail } from '../services/SellerApi';

interface ISeller {
  "sellerId": number,
  "name": string,
  "sellerType": string,
  "logoUrl":string
}

export interface SellerState {
  selectedSeller: number,
  sellers:[],
  seller: ISeller
  status: 'idle' | 'loading' | 'failed';
}

const initialState: SellerState = {
  selectedSeller: 1942009976,
  sellers:[],
  seller: {
    "sellerId": 0,
    "name": '',
    "sellerType": '',
    "logoUrl":''
  } ,
  status: 'idle',
};

export const sellerSlice = createSlice({
    name: 'seller',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: { },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getSellerDetail.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getSellerDetail.fulfilled, (state, action) => {
          state.status = 'idle';
          state.seller = action.payload
        })
        .addCase(getSellerDetail.rejected, (state) => {
          state.status = 'failed';
        })
    },
  });
  
  const { reducer } = sellerSlice;
  export default reducer;
  

