import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getProductDetail, getSellerProductList } from '../services/ProductApi';
import { getBidsByProductId } from '../services/ProductBidApi';

export interface ProductState {
  selectedProduct: number,
  productList:any [],
  product: {
   "productId": number | any,
   "name": string | any,
   "shortDescription":string | any,
   "detailDescription":string | any,
   "category":number | any,
   "startingPrice":number | any,
   "bidCloseDate":string | any
  },
  products:[],
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ProductState = {
  selectedProduct: 0,
  productList: [],
  product: {
    "productId": null,
    "name": null,
    "shortDescription":null,
    "detailDescription":null,
    "category":null,
    "startingPrice":null,
    "bidCloseDate":null
  },
  products:[],
  status: 'idle',
};

export const productSlice = createSlice({
    name: 'product',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        selectProduct: (state, action: PayloadAction<number>) => {
            state.selectedProduct = action.payload
        }
     },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getSellerProductList.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getSellerProductList.fulfilled, (state, action) => {
          state.status = 'idle';
          state.productList = action.payload
        })
        .addCase(getSellerProductList.rejected, (state) => {
          state.status = 'failed';
        })
        .addCase(getProductDetail.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getProductDetail.fulfilled, (state, action) => {
            state.status = 'idle';
            let data = action.payload;
            state.product = data[0]? data[0] : {};
        })
        .addCase(getProductDetail.rejected, (state) => {
        state.status = 'failed';
        });
    },
  });
  
  export const { selectProduct } = productSlice.actions;
  const { reducer } = productSlice;
  export default reducer;
  

